import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/hooks/useAuth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { ArrowLeft, Loader2, FileText, Calendar } from "lucide-react";
import Header from "@/components/Header";

const HealthRecords = () => {
  const { user, loading: authLoading } = useAuth();
  const navigate = useNavigate();
  const [logs, setLogs] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      fetchLogs();
    }
  }, [user]);

  const fetchLogs = async () => {
    try {
      const { data, error } = await supabase
        .from('symptom_logs')
        .select('*')
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setLogs(data || []);
    } catch (error: any) {
      toast.error("Failed to load health records");
    } finally {
      setLoading(false);
    }
  };

  if (authLoading || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (!user) {
    navigate("/auth");
    return null;
  }

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'severe': return 'bg-destructive text-destructive-foreground';
      case 'moderate': return 'bg-orange-500 text-white';
      case 'mild': return 'bg-green-500 text-white';
      default: return 'bg-secondary text-secondary-foreground';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-accent/5 to-primary/5">
      <Header />
      
      <main className="container max-w-6xl mx-auto px-4 py-8">
        <Button 
          variant="ghost" 
          onClick={() => navigate("/")}
          className="mb-6"
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Dashboard
        </Button>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-2xl flex items-center gap-2">
              <FileText className="h-6 w-6" />
              Health Records
            </CardTitle>
            <CardDescription>
              View your symptom analysis history and health insights
            </CardDescription>
          </CardHeader>
        </Card>

        {logs.length === 0 ? (
          <Card>
            <CardContent className="py-12 text-center">
              <FileText className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Records Yet</h3>
              <p className="text-muted-foreground mb-6">
                Start by scanning your symptoms to build your health history
              </p>
              <Button onClick={() => navigate("/symptom-scanner")}>
                Scan Symptoms
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid gap-6">
            {logs.map((log) => (
              <Card key={log.id}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg mb-1">Symptom Analysis</CardTitle>
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Calendar className="h-4 w-4" />
                        {new Date(log.created_at).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </div>
                    </div>
                    <Badge className={getSeverityColor(log.severity)}>
                      {log.severity?.toUpperCase() || 'UNKNOWN'}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h4 className="font-semibold text-sm mb-2">Symptoms Reported:</h4>
                    <p className="text-sm text-muted-foreground">{log.symptoms}</p>
                  </div>

                  {log.analysis_result && (
                    <div>
                      <h4 className="font-semibold text-sm mb-2">Possible Conditions:</h4>
                      <div className="space-y-2">
                        {log.analysis_result.map((condition: any, index: number) => (
                          <div key={index} className="flex items-center justify-between text-sm bg-accent/20 p-2 rounded">
                            <span>{condition.name}</span>
                            <Badge variant="outline">{condition.confidence}%</Badge>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {log.recommendations && (
                    <div>
                      <h4 className="font-semibold text-sm mb-2">Recommendations:</h4>
                      <p className="text-sm text-muted-foreground whitespace-pre-line">{log.recommendations}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </main>
    </div>
  );
};

export default HealthRecords;
